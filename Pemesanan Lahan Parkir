#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <chrono>
#include <thread>

using namespace std;

void cls() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

void tampilkanLoading() {
    cout << " ";
    for (int i = 0; i < 3; ++i) {
        this_thread::sleep_for(chrono::milliseconds(500));
        cout << ".";
    }
    cout << endl;
}

class Pengguna {
private:
    string username;
    string password;

public:
    Pengguna(string uname, string pwd) : username(uname), password(pwd) {}

    string getUsername() const {
        return username;
    }

    string getPassword() const {
        return password;
    }

    bool validatePassword(string pwd) const {
        return password == pwd;
    }
};

class TempatParkir {
private:
    char lokasi;
    int nomor;
    bool sudahDipesan;

public:
    TempatParkir(char loc, int num) : lokasi(loc), nomor(num), sudahDipesan(false) {}

    char getLokasi() const {
        return lokasi;
    }

    int getNomor() const {
        return nomor;
    }

    bool getStatus() const {
        return sudahDipesan;
    }

    void pesanTempat() {
        sudahDipesan = true;
    }

    void batalkanTempat() {
        sudahDipesan = false;
    }

    string getInfoTempat() const {
        return string(1, lokasi) + to_string(nomor);
    }
};

Pengguna& buatAkun(vector<Pengguna>& pengguna) {
    string username, password;
    cout << "Masukkan username: ";
    cin >> username;
    cout << "Masukkan password: ";
    cin >> password;

    Pengguna penggunaBaru(username, password);
    pengguna.push_back(penggunaBaru);

    tampilkanLoading();

    cls();
    cout << "Akun berhasil dibuat!" << endl;
    return pengguna.back(); 
}

Pengguna* login(vector<Pengguna>& pengguna) {
    string username, password;
    cout << "Masukkan username: ";
    cin >> username;
    cout << "Masukkan password: ";
    cin >> password;

    for (auto& user : pengguna) {
        if (user.getUsername() == username && user.validatePassword(password)) {
            tampilkanLoading();

            cls();
            cout << "Login berhasil!" << endl;
            return &user;
        }
    }
    cout << "Username atau password salah." << endl;
    return nullptr;
}

void tampilkanTempatParkir(vector<TempatParkir>& tempat) {
    for (auto& spot : tempat) {
        cout << "Lokasi: " << spot.getLokasi() << ", Nomor: " << spot.getNomor()
             << ", Status: " << (spot.getStatus() ? "Dipesan" : "Tersedia") << endl;
    }
}

TempatParkir* cariTempatParkir(vector<TempatParkir>& tempat, char lokasi) {
    for (auto& spot : tempat) {
        if (spot.getLokasi() == lokasi && !spot.getStatus()) {
            return &spot;
        }
    }
    return nullptr;
}

string buatKonfirmasi(TempatParkir& spot) {
    srand(time(0));
    string konfirmasi = "PARK" + to_string(rand() % 10000 + 1000);
    return konfirmasi;
}

void tampilkanBarcode(const string& kode) {
    cout << "Barcode: ";
    for (char c : kode) {
        if (c >= '0' && c <= '9') {
            int val = c - '0';
            cout << "[";
            for (int i = 0; i < val; ++i) {
                cout << "#";
            }
            cout << "] ";
        } else if (c == ' ') {
            cout << "    "; 
        }
    }
    cout << "\n--------------------------------------------------------------------";
    cout << endl;
}
